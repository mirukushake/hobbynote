generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Brand {
  id          Int          @id @default(dbgenerated("unique_random_id(8, 'brands'::text, 'id'::text)"))
  country_id  Int
  brand_name  Json
  country     Country      @relation(fields: [country_id], references: [id], onDelete: Cascade, map: "brands_country_fkey")
  floss       Floss[]
  pencils     Pencil[]
  series      Series[]
  watercolors Watercolor[]

  @@map("brands")
}

model Color {
  id          Int          @id @default(dbgenerated("unique_random_id(4, 'colors'::text, 'id'::text)"))
  color       Json?
  color_name  Json?
  order       Int?         @unique(map: "colors_order_idx")
  floss       Floss[]
  pencils     Pencil[]
  watercolors Watercolor[]

  @@map("colors")
}

model combos {
  id           Int       @id @default(dbgenerated("unique_random_id(10, 'combos'::text, 'id'::text)"))
  title        String
  image        String?
  description  String?
  date_created DateTime  @default(now()) @db.Timestamp(6)
  date_updated DateTime? @db.Timestamp(6)
}

model Country {
  id           Int     @id @default(autoincrement())
  code         String? @db.VarChar(2)
  country_name Json?
  brands       Brand[]

  @@map("countries")
}

model ItemCategory {
  id            Int            @id @default(dbgenerated("unique_random_id(5, 'item_categories'::text, 'id'::text)"))
  category_name Json           @default("{\"en\": \"\"}")
  parent_id     Int?
  order         Int?
  parent        ItemCategory?  @relation("item_categoriesToitem_categories_parent_id", fields: [parent_id], references: [id], onDelete: Cascade)
  children      ItemCategory[] @relation("item_categoriesToitem_categories_parent_id")
  items         Item[]

  @@unique([parent_id, order], map: "item_categories_parent_id_order_idx")
  @@map("item_categories")
}

model Item {
  id            Int          @id @default(dbgenerated("unique_random_id(10, 'items'::text, 'id'::text)"))
  category_id   Int
  floss         Floss?
  item_category ItemCategory @relation(fields: [category_id], references: [id], onDelete: Cascade)
  pencil        Pencil?      @relation("itemsTopencils")

  @@map("items")
}

model Pencil {
  item_id     Int     @id
  brand_id    Int
  code        String?
  rgb         Json?
  series_id   Int?
  pencil_name Json?
  color_id    Int?
  order       Int?
  inv_qty     Int     @default(0)
  wish_qty    Int     @default(0)
  brand       Brand   @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  color       Color?  @relation(fields: [color_id], references: [id], onDelete: Cascade)
  item        Item    @relation("itemsTopencils", fields: [item_id], references: [id], onDelete: Cascade)
  series      Series? @relation(fields: [series_id], references: [id], onDelete: Cascade)

  @@unique([brand_id, order], map: "pencils_brand_id_order_idx")
  @@map("pencils")
}

model Pigment {
  id          Int          @id @default(dbgenerated("unique_random_id(8, 'pigments'::text, 'id'::text)"))
  name        String       @unique(map: "pigments_name_idx")
  watercolors Watercolor[] @relation("PigmentToWatercolor")

  @@map("pigments")
}

model EmbroideryDesign {
  id             Int       @id @default(dbgenerated("unique_random_id(8, 'embroidery_design'::text, 'id'::text)"))
  title          String?
  finished_image String?
  pattern_image  String?
  book_title     String?
  website_url    String?
  notes          String?
  status_id      Int?
  created        DateTime  @default(now()) @db.Timestamp(6)
  updated        DateTime? @db.Timestamp(6)
  status         Status?   @relation("embroidery_design_statusTostatus", fields: [status_id], references: [id], onDelete: Cascade, map: "embroidery_design_status_fkey")
  floss          Floss[]   @relation("EmbroideryDesignToFloss")

  @@map("embroidery_design")
}

model Floss {
  item_id    Int                @id
  brand_id   Int
  code       String?
  floss_name Json?
  rgb        Json?
  order      Int?
  color_id   Int?
  inv_qty    Int                @default(0)
  wish_qty   Int                @default(0)
  brand      Brand              @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  color      Color?             @relation(fields: [color_id], references: [id], onDelete: Cascade)
  items      Item               @relation(fields: [item_id], references: [id], onDelete: Cascade)
  design     EmbroideryDesign[] @relation("EmbroideryDesignToFloss")
  floss_A    Floss[]            @relation("flossAlternatives")
  floss_B    Floss[]            @relation("flossAlternatives")

  @@map("floss")
}

model Status {
  id                Int                @id @default(autoincrement())
  code              String?
  code_name         Json?
  order             Int?               @unique
  embroidery_design EmbroideryDesign[] @relation("embroidery_design_statusTostatus")

  @@map("status")
}

model Watercolor {
  item_id    Int       @id
  brand_id   Int
  code       String?
  swatch     String?
  series_id  Int?
  paint_name Json?
  color_id   Int?
  sizes      Int[]
  order      Int?
  inv_qty    Int       @default(0)
  wish_qty   Int       @default(0)
  brands     Brand     @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  colors     Color?    @relation(fields: [color_id], references: [id], onDelete: Cascade)
  pigments   Pigment[] @relation("PigmentToWatercolor")

  @@map("watercolors")
}

model Series {
  id          Int      @id @default(dbgenerated("unique_random_id(8, 'series'::text, 'id'::text)"))
  brand       Int
  series_name Json
  pencils     Pencil[]
  brands      Brand    @relation(fields: [brand], references: [id], onDelete: Cascade)

  @@map("series")
}
