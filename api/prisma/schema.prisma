generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Brand {
  id         Int      @id @default(dbgenerated("unique_random_id(8, 'brands'::text, 'id'::text)"))
  country_id Int
  brand_name Json
  country    Country  @relation(fields: [country_id], references: [id], onDelete: Cascade, map: "brands_country_fkey")
  floss      Floss[]
  pencils    Pencil[]

  @@map("brands")
}

model Color {
  id         Int      @id @default(dbgenerated("unique_random_id(4, 'colors'::text, 'id'::text)"))
  color      Json?
  color_name Json?
  order      Int?     @unique(map: "colors_order_idx")
  floss      Floss[]
  pencils    Pencil[]

  @@map("colors")
}

model combos {
  id           Int       @id @default(dbgenerated("unique_random_id(10, 'combos'::text, 'id'::text)"))
  title        String
  image        String?
  description  String?
  date_created DateTime  @default(now()) @db.Timestamp(6)
  date_updated DateTime? @db.Timestamp(6)
}

model Country {
  id           Int     @id @default(autoincrement())
  code         String? @db.VarChar(2)
  country_name Json?
  brands       Brand[]

  @@map("countries")
}

model ItemCategory {
  id            Int            @id @default(dbgenerated("unique_random_id(5, 'item_categories'::text, 'id'::text)"))
  category_name Json           @default("{\"en\": \"\"}")
  parent_id     Int?
  order         Int?
  parent        ItemCategory?  @relation("item_categoriesToitem_categories_parent_id", fields: [parent_id], references: [id], onDelete: Cascade)
  children      ItemCategory[] @relation("item_categoriesToitem_categories_parent_id")
  items         Item[]

  @@unique([parent_id, order], map: "item_categories_parent_id_order_idx")
  @@map("item_categories")
}

model Item {
  id            Int          @id @default(dbgenerated("unique_random_id(10, 'items'::text, 'id'::text)"))
  category_id   Int
  floss         Floss?
  item_category ItemCategory @relation(fields: [category_id], references: [id], onDelete: Cascade)
  pencil        Pencil?      @relation("itemsTopencils")

  @@map("items")
}

model Pencil {
  item_id     Int     @id
  brand_id    Int
  code        String?
  rgb         Json?
  series_id   Int?
  pencil_name Json?
  color_id    Int?
  order       Int?
  inv_qty     Int?    @default(0)
  wish_qty    Int?    @default(0)
  brand       Brand   @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  color       Color?  @relation(fields: [color_id], references: [id], onDelete: Cascade)
  item        Item    @relation("itemsTopencils", fields: [item_id], references: [id], onDelete: Cascade)

  @@unique([brand_id, order], map: "pencils_brand_id_order_idx")
  @@map("pencils")
}

model pigments {
  id   Int    @id @default(dbgenerated("unique_random_id(8, 'pigments'::text, 'id'::text)"))
  name String @unique(map: "pigments_name_idx")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model temp_pencils {
  code        String?
  brand_id    Int?
  rgb         Json?
  color_id    Int?
  order       Int?
  pencil_name Json?

  @@ignore
}

model EmbroideryDesign {
  id             Int                     @id @default(dbgenerated("unique_random_id(8, 'embroidery_design'::text, 'id'::text)"))
  title          String?
  finished_image String?
  pattern_image  String?
  book_title     String?
  website_url    String?
  notes          String?
  floss          EmbroideryDesignFloss[] 

  @@map("embroidery_design")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model EmbroideryDesignFloss {
  design_id         Int
  floss_id          Int
  embroidery_design EmbroideryDesign @relation(fields: [design_id], references: [id], onDelete: Cascade)
  floss             Floss            @relation(fields: [floss_id], references: [item_id], onDelete: Cascade)

  @@map("embroidery_design_floss")
  @@id([design_id, floss_id])
}

model Floss {
  item_id           Int                     @id
  brand_id          Int
  code              String?
  floss_name        Json?
  rgb               Json?
  order             Int?
  color_id          Int?
  inv_qty           Int?                    @default(0)
  wish_qty          Int?                    @default(0)
  embroidery_design EmbroideryDesignFloss[] 
  brand             Brand                   @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  color             Color?                  @relation(fields: [color_id], references: [id], onDelete: Cascade)
  items             Item                    @relation(fields: [item_id], references: [id], onDelete: Cascade)

  @@map("floss")
}
